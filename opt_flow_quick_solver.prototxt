# reduce the learning rate after 8 epochs (4000 iters) by a factor of 10

# The train/test net protocol buffer definition
# net: "/home/lnmiit/caffe/examples/optical_flow/demoDeploy.prototxt"
#net: "/home/lnmiit/caffe/examples/optical_flow/demoDeploy1.prototxt"
# test_iter specifies how many forward passes the test should carry out.
# In the case of MNIST, we have test batch size 100 and 100 test iterations,
# covering the full 10,000 testing images.
#test_iter: 3629
# Carry out testing every 500 training iterations.
#test_interval: 500
# The base learning rate, momentum and the weight decay of the network.
#base_lr: 0.01
#momentum: 0.9
#momentum2: 0.999
#weight_decay: 0.0005
# The learning rate policy
#lr_policy: "step"
#gamma: 0.1
#stepsize: 1000
# Display every 100 iterations
#display: 200
# The maximum number of iterations
#max_iter: 3500
# snapshot intermediate results
#snapshot: 3500
#snapshot_prefix: "/home/lnmiit/caffe/examples/optical_flow/demo1_opt_flow_quick"
# solver mode: CPU or GPU
#type: "SGD"
#solver_mode: GPU
######################
# The train/test net protocol buffer definition
# this follows "ADAM: A METHOD FOR STOCHASTIC OPTIMIZATION"
net: "/home/lnmiit/caffe/examples/optical_flow/demoDeploy1.prototxt"
# test_iter specifies how many forward passes the test should carry out.
# In the case of MNIST, we have test batch size 100 and 100 test iterations,
# covering the full 10,000 testing images.
test_iter: 370
# Carry out testing every 500 training iterations.
test_interval: 500
# All parameters are from the cited paper above
base_lr: 0.001
momentum: 0.9
momentum2: 0.999
# since Adam dynamically changes the learning rate, we set the base learning
# rate to a fixed value
lr_policy: "fixed"
# Display every 100 iterations
display: 100
# The maximum number of iterations
max_iter: 10000
# snapshot intermediate results
snapshot: 5000
snapshot_prefix: "/home/lnmiit/caffe/examples/optical_flow/demo1_opt_flow_quick"
# solver mode: CPU or GPU
type: "Adam"
solver_mode: GPU